h1. CryptoPro

ruby-wrapper for *nix CryptoPro CSP command line utility cryptcp

Ruby-обёртка для утилиты командной строки cryptcp от CryptoPro CSP в никсах.
Позволяет легко работать с ЭЦП из ruby.

h1. Использование

В Gemfile:

bc. gem 'cryptopro'

h2. Проверка подписи

bc. Cryptopro::Signature.verify(:message => "message", :signature => "signature", :certificate => "certificate")

h2. Получение сертификата в УЦ

h3. Тестововый сертификат

bc. Cryptopro::Csr.issue_test_certificate(csr)

Совмещает в себе отправку запроса и получение тестового сертификата.

h3. Полноценный сертификат

h4. Запрос на выпуск сертификата

bc. Cryptopro::Csr.issue(csr)

На вход: csr в формате pem.
Ответ: ruby hash в формате @{"created_request_id" => <number>}@ или @{"error" => <message>}@.

p. Замечание: сокращенный пример запроса на сертификат (csr) в формате pem:

bc. -----BEGIN CERTIFICATE REQUEST-----\nMIICTzCCAfwCAQAwggFEMT0wOwYDVQQDHjQEEAQ7BDUEOgRBBDAEPQQ0BEAAIAQfBDAEMgQ7BD4EMgQ4BEcAIAQSBDAEMgQ4BDsEPgQyMRUwEwYYVQUHHgwGHPQ\n-----END CERTIFICATE REQUEST-----

h4. Получение готовых сертификатов из Удостоверяющего центра (УЦ/CA)

bc. Cryptopro::Csr.get_certificates(request_ids)

На вход: id сертификатов в очереди на выпуск (request_ids).
Ответ: json в формате @[{"id" => <request_id>, "certificate" => <certificate_body>}@, если серт. еще не выпущен - @{"id" => <request_id>, "error" => "certificate is not ready yet"}]@.

p. Замечание: значение по ключу @certificate@ – тело сертификата, то есть base64-строка (без BEGIN CERTIFICATE/END CERTIFICATE), разбитая на части по 64 символа каждая.
Пример (сокращенная версия):

bc. MIIDZjCCAxOgAwIBAgIKXaz9BwAAAADF1jAKBgYqhQMCAgMFADCBkjEeMBwGCSqG\nSIb3DQEJARYPY29udGFjdEBla2V5LnJ1MQswCQYDVQQGEwJSVTEVMBMGA1UEBwwM\n0JzQvtGB0LrQstCwMTcwNQYDVQQKn8HsQFSfy9BDG+A==\n

h2. Получение информации по сертификату

bc. Cryptopro::Certificate.info(body)

Copyright (c) 2011 divineforest, evrone.com
This project rocks and uses MIT-LICENSE.
